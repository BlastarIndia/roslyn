//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.CodeAnalysis.FxCopAnalyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class FxCopRulesResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal FxCopRulesResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.CodeAnalysis.FxCopAnalyzers.FxCopRulesResources", typeof(FxCopRulesResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Abstract classes should not have public constructors.
        /// </summary>
        internal static string AbstractTypesShouldNotHavePublicConstructors {
            get {
                return ResourceManager.GetString("AbstractTypesShouldNotHavePublicConstructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the accessibility of all public contructors in this class to protected..
        /// </summary>
        internal static string AbstractTypesShouldNotHavePublicConstructorsCodeFix {
            get {
                return ResourceManager.GetString("AbstractTypesShouldNotHavePublicConstructorsCodeFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add [Serializable] to {0} as this type implements ISerializable.
        /// </summary>
        internal static string AddSerializableAttributeToType {
            get {
                return ResourceManager.GetString("AddSerializableAttributeToType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemblies should be marked with AssemblyVersionAttribute.
        /// </summary>
        internal static string AssembliesShouldBeMarkedWithAssemblyVersionAttribute {
            get {
                return ResourceManager.GetString("AssembliesShouldBeMarkedWithAssemblyVersionAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid unsealed attributes..
        /// </summary>
        internal static string AvoidUnsealedAttributes {
            get {
                return ResourceManager.GetString("AvoidUnsealedAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider changing the ComVisible attribute on {0} to false, and opting in at the type level..
        /// </summary>
        internal static string CA1017_AttributeTrue {
            get {
                return ResourceManager.GetString("CA1017_AttributeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because {0} exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true)..
        /// </summary>
        internal static string CA1017_NoAttribute {
            get {
                return ResourceManager.GetString("CA1017_NoAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &apos;{0}&apos; to a property if appropriate..
        /// </summary>
        internal static string ChangeToAPropertyIfAppropriate {
            get {
                return ResourceManager.GetString("ChangeToAPropertyIfAppropriate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom attributes should have AttributeUsage attribute defined..
        /// </summary>
        internal static string CustomAttrShouldHaveAttributeUsage {
            get {
                return ResourceManager.GetString("CustomAttrShouldHaveAttributeUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Define accessors for attribute arguments..
        /// </summary>
        internal static string DefineAccessorsForAttributeArguments {
            get {
                return ResourceManager.GetString("DefineAccessorsForAttributeArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a public read-only property accessor for positional argument &apos;{0}&apos; of attribute &apos;{1}&apos;..
        /// </summary>
        internal static string DefineAccessorsForAttributeArgumentsDefault {
            get {
                return ResourceManager.GetString("DefineAccessorsForAttributeArgumentsDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If &apos;{0}&apos; is the property accessor for positional argument &apos;{1}&apos;, ensure that property getter is public..
        /// </summary>
        internal static string DefineAccessorsForAttributeArgumentsIncreaseVisibility {
            get {
                return ResourceManager.GetString("DefineAccessorsForAttributeArgumentsIncreaseVisibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove the property setter from &apos;{0}&apos; or reduce its accessibility because it corresponds to positional argument &apos;{1}&apos;..
        /// </summary>
        internal static string DefineAccessorsForAttributeArgumentsRemoveSetter {
            get {
                return ResourceManager.GetString("DefineAccessorsForAttributeArgumentsRemoveSetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposable fields should be disposed.
        /// </summary>
        internal static string DisposableFieldsShouldBeDisposed {
            get {
                return ResourceManager.GetString("DisposableFieldsShouldBeDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not call overridable methods in constructors.
        /// </summary>
        internal static string DoNotCallOverridableMethodsInConstructors {
            get {
                return ResourceManager.GetString("DoNotCallOverridableMethodsInConstructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on objects with weak identity..
        /// </summary>
        internal static string DoNotLockOnObjectsWithWeakIdentity {
            get {
                return ResourceManager.GetString("DoNotLockOnObjectsWithWeakIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on a reference of type &apos;{0}&apos; as it has weak identity. Replace that with a lock against an object with strong identity..
        /// </summary>
        internal static string DoNotLockOnWeakIdentity {
            get {
                return ResourceManager.GetString("DoNotLockOnWeakIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not mark Enum with FlagsAttribute.
        /// </summary>
        internal static string DoNotMarkEnumsWithFlags {
            get {
                return ResourceManager.GetString("DoNotMarkEnumsWithFlags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: &apos;{1}&apos;..
        /// </summary>
        internal static string DoNotMarkEnumsWithFlagsMessage {
            get {
                return ResourceManager.GetString("DoNotMarkEnumsWithFlagsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enums should have zero value..
        /// </summary>
        internal static string EnumsShouldHaveZeroValue {
            get {
                return ResourceManager.GetString("EnumsShouldHaveZeroValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove all members that have the value zero from &apos;{0}&apos; except for one member that is named &apos;None&apos;..
        /// </summary>
        internal static string EnumsShouldZeroValueFlagsMultipleZero {
            get {
                return ResourceManager.GetString("EnumsShouldZeroValueFlagsMultipleZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In enum &apos;{0}&apos;, change the name of &apos;{1}&apos; to &apos;None&apos;..
        /// </summary>
        internal static string EnumsShouldZeroValueFlagsRename {
            get {
                return ResourceManager.GetString("EnumsShouldZeroValueFlagsRename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a member to &apos;{0}&apos; that has a value of zero with a suggested name of &apos;None&apos;..
        /// </summary>
        internal static string EnumsShouldZeroValueNotFlagsNoZeroValue {
            get {
                return ResourceManager.GetString("EnumsShouldZeroValueNotFlagsNoZeroValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field {0} is a member of type {1} which is serializable but is of type {2} which is not serializable.
        /// </summary>
        internal static string FieldIsOfNonSerializableType {
            get {
                return ResourceManager.GetString("FieldIsOfNonSerializableType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} &apos;{1}&apos; have identical names in a case-insensitive manner..
        /// </summary>
        internal static string IdentifierNamesShouldDifferMoreThanCase {
            get {
                return ResourceManager.GetString("IdentifierNamesShouldDifferMoreThanCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier names should differ by more than case.
        /// </summary>
        internal static string IdentifiersShouldDifferByMoreThanCase {
            get {
                return ResourceManager.GetString("IdentifiersShouldDifferByMoreThanCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement Serialization constructor.
        /// </summary>
        internal static string ImplementSerializationConstructor {
            get {
                return ResourceManager.GetString("ImplementSerializationConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface names should be prefixed with &apos;I&apos;.
        /// </summary>
        internal static string InterfaceNamesShouldStartWithI {
            get {
                return ResourceManager.GetString("InterfaceNamesShouldStartWithI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark all assemblies with ComVisible.
        /// </summary>
        internal static string MarkAllAssembliesWithComVisible {
            get {
                return ResourceManager.GetString("MarkAllAssembliesWithComVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark all non-serializable fields..
        /// </summary>
        internal static string MarkAllNonSerializableFields {
            get {
                return ResourceManager.GetString("MarkAllNonSerializableFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark assemblies with CLSCompliantAttribute.
        /// </summary>
        internal static string MarkAssembliesWithCLSCompliantAttribute {
            get {
                return ResourceManager.GetString("MarkAssembliesWithCLSCompliantAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify AttributeUsage attribute on &apos;{0}&apos; attribute class..
        /// </summary>
        internal static string MarkAttributesWithAttributeUsage {
            get {
                return ResourceManager.GetString("MarkAttributesWithAttributeUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark Enum with FlagsAttribute.
        /// </summary>
        internal static string MarkEnumsWithFlags {
            get {
                return ResourceManager.GetString("MarkEnumsWithFlags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constituent members of &apos;{0}&apos; appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute..
        /// </summary>
        internal static string MarkEnumsWithFlagsMessage {
            get {
                return ResourceManager.GetString("MarkEnumsWithFlagsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark ISerializable types with SerializableAttribute..
        /// </summary>
        internal static string MarkISerializableTypesWithAttribute {
            get {
                return ResourceManager.GetString("MarkISerializableTypesWithAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move P/Invokes to native methods class.
        /// </summary>
        internal static string MovePInvokesToNativeMethodsClass {
            get {
                return ResourceManager.GetString("MovePInvokesToNativeMethodsClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overload operator Equals and comparison operators when implementing System.IComparable.
        /// </summary>
        internal static string OverloadOperatorEqualsOnIComparableInterface {
            get {
                return ResourceManager.GetString("OverloadOperatorEqualsOnIComparableInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overload operator equals on overriding ValueType.Equals.
        /// </summary>
        internal static string OverloadOperatorEqualsOnOverridingValueTypeEquals {
            get {
                return ResourceManager.GetString("OverloadOperatorEqualsOnOverridingValueTypeEquals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to P/Invoke method &apos;{0}&apos; should not be visible.
        /// </summary>
        internal static string PInvokeMethodShouldNotBeVisible {
            get {
                return ResourceManager.GetString("PInvokeMethodShouldNotBeVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to P/Invokes should not be visible..
        /// </summary>
        internal static string PInvokesShouldNotBeVisible {
            get {
                return ResourceManager.GetString("PInvokesShouldNotBeVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove empty finalizers.
        /// </summary>
        internal static string RemoveEmptyFinalizers {
            get {
                return ResourceManager.GetString("RemoveEmptyFinalizers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Re-throwing caught exception changes stack information..
        /// </summary>
        internal static string RethrowException {
            get {
                return ResourceManager.GetString("RethrowException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rethrow to preserve stack details..
        /// </summary>
        internal static string RethrowToPreserveStackDetails {
            get {
                return ResourceManager.GetString("RethrowToPreserveStackDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes..
        /// </summary>
        internal static string SealAttributeTypesForImprovedPerf {
            get {
                return ResourceManager.GetString("SealAttributeTypesForImprovedPerf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serializable type {0} doesn&apos;t have a serialization constructor.
        /// </summary>
        internal static string SerializableTypeDoesntHaveCtor {
            get {
                return ResourceManager.GetString("SerializableTypeDoesntHaveCtor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declare serialization constructor for sealed type {0} as private.
        /// </summary>
        internal static string SerializationCtorAccessibilityForSealedType {
            get {
                return ResourceManager.GetString("SerializationCtorAccessibilityForSealedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declare serialization constructor for unsealed type {0} as protected.
        /// </summary>
        internal static string SerializationCtorAccessibilityForUnSealedType {
            get {
                return ResourceManager.GetString("SerializationCtorAccessibilityForUnSealedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify marshaling for P/Invoke string arguments.
        /// </summary>
        internal static string SpecifyMarshalingForPInvokeStringArguments {
            get {
                return ResourceManager.GetString("SpecifyMarshalingForPInvokeStringArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is a static holder type but is neither static nor NotInheritable.
        /// </summary>
        internal static string StaticHolderTypeIsNotStatic {
            get {
                return ResourceManager.GetString("StaticHolderTypeIsNotStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static holder types should be Static or NotInheritable.
        /// </summary>
        internal static string StaticHolderTypesShouldBeStaticOrNotInheritable {
            get {
                return ResourceManager.GetString("StaticHolderTypesShouldBeStaticOrNotInheritable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static holder types should not have instance constructors.
        /// </summary>
        internal static string StaticHolderTypesShouldNotHaveConstructors {
            get {
                return ResourceManager.GetString("StaticHolderTypesShouldNotHaveConstructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is a static holder type and should not contain Instance Constructors.
        /// </summary>
        internal static string StaticHolderTypesShouldNotHaveConstructorsMessage {
            get {
                return ResourceManager.GetString("StaticHolderTypesShouldNotHaveConstructorsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String comparison should use StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase.
        /// </summary>
        internal static string StringComparisonShouldBeOrdinalOrOrdinalIgnoreCase {
            get {
                return ResourceManager.GetString("StringComparisonShouldBeOrdinalOrOrdinalIgnoreCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is abstract but has public constructors.
        /// </summary>
        internal static string TypeIsAbstractButHasPublicConstructors {
            get {
                return ResourceManager.GetString("TypeIsAbstractButHasPublicConstructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; owns disposable fields but is not disposable.
        /// </summary>
        internal static string TypeOwnsDisposableFieldButIsNotDisposable {
            get {
                return ResourceManager.GetString("TypeOwnsDisposableFieldButIsNotDisposable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter names should be prefixed with &apos;T&apos;.
        /// </summary>
        internal static string TypeParameterNamesShouldStartWithT {
            get {
                return ResourceManager.GetString("TypeParameterNamesShouldStartWithT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types that own disposable fields should be disposable.
        /// </summary>
        internal static string TypesThatOwnDisposableFieldsShouldBeDisposable {
            get {
                return ResourceManager.GetString("TypesThatOwnDisposableFieldsShouldBeDisposable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use System.EventHandler&lt;T&gt; where T inherits System.EventArgs or use System.EventHandler.
        /// </summary>
        internal static string UseGenericEventHandlerInstances {
            get {
                return ResourceManager.GetString("UseGenericEventHandlerInstances", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use properties where appropriate..
        /// </summary>
        internal static string UsePropertiesWhereAppropriate {
            get {
                return ResourceManager.GetString("UsePropertiesWhereAppropriate", resourceCulture);
            }
        }
    }
}
